<?php


/**
 *  Implements of hook_menu()
 */
function intel_twilio_menu() {
  $items = array();
  $items['intel_twilio/test_form'] = array(
    'title' => 'Intel Twilio test form',
    'description' => 'Analyze and optimize node content.',
    //'page callback' => 'intel_twilio_test_form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('intel_twilio_test_form'),
    'access callback' => 'user_access',
    'access arguments' => array('admin intel'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_twilio_voice_incoming()
 * @param $number
 * @param $options
 */
function intel_twilio_twilio_voice_incoming($number, $options) {
  $watchdog = '';
  $status = '';

  try {
    intel_twilio_process_incoming($number, $options, $watchdog);
  }
  catch (Exception $e)
  {
    $watchdog .=  "error:" . "<br>\n" . $e->getMessage() . "<br>\n<br>\n";
    $status = 'error';
  }

  $phonenumber = intel_phonenumber_load_by_number($_REQUEST['To']);
  if (!$phonenumber) {
    $say = t('This phone number has not been configured.');
    $watchdog = $say . "<br>\n<br>\n" . $watchdog;
    watchdog('intel_twilio voice incoming', $watchdog, array(), WATCHDOG_ERROR);
    echo intel_twilio_say_response($say);
    return;
  }
  if (empty($phonenumber['handling_forwarding_number']) && empty($phonenumber['handling_twiml'])) {
    $say = t('Handling options have not been set on this phone number.');
    $watchdog = $say . "<br>\n<br>\n" . $watchdog;
    watchdog('intel_twilio voice incoming', $watchdog, array(), WATCHDOG_ERROR);
    echo intel_twilio_say_response($say);
    return;
  }


  if (!empty($phonenumber['handling_twiml'])) {
    $twiml = twilio_twiml_load($phonenumber['handling_twiml']);
    if (!isset($twiml)) {

    }
    $watchdog .= "twiml:" . "<br>\n" . print_r($twiml, 1) . "<br>\n<br>\n";
    twilio_twiml_display($twiml);
  }
  else {
    $say = t('The call failed or the remote party hung up. Goodbye.');
    $dial = $phonenumber['handling_forwarding_number'];
    echo intel_twilio_dial_response($dial, $say);
  }
  watchdog('intel_twilio voice incoming', $watchdog);
}

function intel_twilio_process_incoming($number, $options, &$watchdog) {
  $watchdog = "number:" . "<br>\n" . print_r($number, 1) . "<br>\n<br>\n";
  $watchdog .= "options:" . "<br>\n" . print_r($options, 1) . "<br>\n<br>\n";
  $watchdog .= "request:" . "<br>\n" . print_r($_REQUEST, 1) . "<br>\n<br>\n";

  intel_include_library_file('class.tracker.php');
  $apiClientProps = intel_get_ApiClientProps();
  $tracker = new \LevelTen\Intel\ApiTracker($apiClientProps);
  $tracker->setDomain(variable_get('intel_domain_name', ''));

  $to_num = $_REQUEST['To'];
  $from_num = $_REQUEST['From'];
  $visitor = intel_visitor_load_or_create($from_num, FALSE, 'phone');
  if (empty($visitor->identifiers['phone'])) {
    $visitor->setIdentifier('phone', $from_num);
  }
  if (empty($visitor->name) && isset($_REQUEST['CallerName'])) {
    $visitor->setName($_REQUEST['CallerName']);
  }
  /*
  if (empty($visitor->vtk)) {
    $session = $tracker->sessionInit();
    if (isset($session['vtk'])) {
      $visitor->setIdentifier('vtk', $session['vtk']);
    }
  }
  */
  // either uid or cid needs to be set for ga so that the session can be updated
  // later

  $key = ':tel:' . $from_num;
  $cid_arr = $visitor->getVar('data', 'cid', $key);
  if (empty($cid_arr) || empty($cid_arr['cid'])) {
    $cid_arr = array(
      'type' => 'tel',
      'cid' => intel_gen_cid(),
      'id' =>  $key,
    );
    $visitor->setVar('data', 'cid', $key, $cid_arr);
  }
  $tracker->setCid($cid_arr['cid']);

  if (isset($visitor->vtk)) {
    $tracker->setVtk($visitor->vtk);
    $tracker->setUid('.');
  }

  $visitor->contact_created = REQUEST_TIME;
  $visitor->updated = REQUEST_TIME;
  $visitor->last_activity = REQUEST_TIME;

  // if new visitor, save to create vid
  if (empty($visitor->vid)) {
    $visitor->save();
  }

  $phonecall = intel_phonecall_construct();
  $phonecall->vid = $visitor->vid;
  $phonecall->to_num = $to_num;
  $phonecall->from_num = $from_num;
  $phonecall->type = 'twilio';
  $phonecall->data['twilio'] = $_REQUEST;

  $phonecall->data['location'] = array(
    'country_code' => isset($_REQUEST['FromCountry']) ? $_REQUEST['FromCountry'] : '(not set)',
    'region' => isset($_REQUEST['FromState']) ? $_REQUEST['FromState'] : '(not set)',
    'city' => isset($_REQUEST['FromCity']) ? $_REQUEST['FromCity'] : '(not set)',
    'postcode' => isset($_REQUEST['FromZip']) ? $_REQUEST['FromCity'] : '(not set)',
  );

  $track = array(
    'category_id' => '',
    'category' => '',
    'number_title' => $to_num,
    'to_number' => $to_num,
    'value' => '',
  );
  $scorings = intel_get_scorings();
  $intel_events = intel_get_intel_event_info();

  $phonenumber = intel_phonenumber_load_by_number($phonecall->to_num);
  if ($phonenumber) {
    $track['category_id'] = $phonenumber['track_phonecall'];
    $track['number_title'] = $phonenumber['title'];
    // if value set in
    if (isset($phonenumber['track_phonecall_value'])) {
      $track['value'] = trim($phonenumber['track_phonecall_value']);
    }
  }

  if ($track['category_id'] == 'phone_call') {
    $track['category'] = t('Phone call');
    $track['value'] = ($track['value'] != '') ? $track['value'] : 0;
  }
  else if ($track['category_id'] == 'phone_call!') {
    $track['category'] = t('Phone call') . '!';
    $track['value'] = ($track['value'] != '') ? $track['value'] : $scorings['phone_call'];
  }
  elseif (isset($intel_events['phonecall_' . $track['category_id']])) {
    $track['category'] = $intel_events['phonecall_' . $track['category_id']]['category'];
    $track['value'] = ($track['value'] != '') ? $track['value'] : $scorings[$track['category_id']];
  }
  else {
    $track['category'] = '';
  }

  $hook_context = array(
    'type' => 'twilio',
    'phonenumber_settings' => $phonenumber,
    //'submit_context' => $submit_context,
    //'cta_context' => $cta_context,
  );
  // throw hook_intel_phone_call_data
  foreach (module_implements('intel_phone_call_data') AS $module) {
    $function = $module . '_intel_phone_call_data';
    $function($visitor, $phonecall, $track, $hook_context);
  }

if (!empty($_REQUEST['debug'])) {
  dsm('$phonenumber:'); dsm($phonenumber);//
  dsm('$scorings:'); dsm($scorings);//
  dsm('$intel_events:'); dsm($intel_events);//
  dsm('$visitor:'); dsm($visitor);//
  dsm('$phonecall:'); dsm($phonecall);//
  dsm('$track:'); dsm($track);//
}

  $visitor->save();
  $watchdog .= "visitor:" . "<br>\n" . print_r($visitor, 1) . "<br>\n<br>\n";

  intel_phonecall_save($phonecall);
  $watchdog .= "phonecall:" . "<br>\n" . print_r($phonecall, 1) . "<br>\n<br>\n";
  $visitor->setVar('visitor', '');
  $tracker->setCid('tel.' . $phonecall->cid);

  $watchdog .= "track:" . "<br>\n" . print_r($track, 1) . "<br>\n<br>\n";
  if (!empty($track['category'])) {
    /*
    $event = array(
      'category' => $track['category'],
      'action' => $track['number_title'],
      'label' => $track['to_number'],
      'value' => $track['value'],
    );
    $ret = $tracker->trackEvent($event);
    */
    $event = array(
      'ec' => $track['category'],
      'ea' => $track['number_title'],
      'el' => $track['to_number'],
      'ev' => $track['value'],
    );
    $ret = $tracker->sendEvent($event);
    if (!empty($_REQUEST['debug'])) {
      dsm('$event:'); dsm($event);//
      dsm('tracker_return:'); dsm($ret);//
    }
    $watchdog .= "tracker event:" . "<br>\n" . print_r($event, 1) . "<br>\n<br>\n";
    $watchdog .= "tracker event response:" . "<br>\n" . print_r($ret, 1) . "<br>\n<br>\n";
  }
  if (module_exists('rules')) {
    rules_invoke_event('intel_phone_call', $phonecall->type, $phonecall->to_num, $visitor);
  }
}

function intel_twilio_say_response($say) {
  $response = "";
  $response .= "<Response>\n";
  $response .= "<Say>$say</Say>\n";
  $response .= "</Response>";
  return $response;
}

function intel_twilio_dial_response($dial, $say = '') {
  $response = "";
  $response .= "<Response>\n";
  $response .= "<Dial>$dial</Dial>\n";
  if ($say) {
    $response .= "<Say>$say</Say>\n";
  }
  $response .= "</Response>";
  return $response;
}

function intel_twilio_send_sms($to_num, $message, $from_num = '') {
  include_once libraries_get_path('twilio') . '/Services/Twilio.php';
  $AccountSid = variable_get('twilio_account', '');
  $AuthToken = variable_get('twilio_token', '');

  $client = new Services_Twilio($AccountSid, $AuthToken);

  if (!$from_num) {
    $from_num = variable_get('intel_sms_send_from_default', '');
  }
  if (!$from_num) {
    $from_num = variable_get('twilio_number', '');
  }
  $sms = $client->account->messages->sendMessage($from_num, $to_num, $message);
}

/**
 * Implements hook_intel_form_submission_data()
 */
function intel_twilio_intel_form_submission_data(&$visitor, &$submission, &$track, $context) {
  // if main contact form
  if (isset($context['form_settings']) && !empty($context['form_settings']['send_sms'])) {
    global $base_url, $base_path;
    $a = explode('//', $base_url);
    $hostpath = $a[1];

    if (!is_array($context['form_settings']['send_sms'])) {
      $context['form_settings']['send_sms'] = array($context['form_settings']['send_sms']);
    }

    foreach ($context['form_settings']['send_sms'] AS $number => $sms) {
      $to_num = intel_twillio_validate_phone_number($number);
      // if invalid number, skip
      if (!$to_num) {
        continue;
      }
      $form_url = substr(url('node/' . $submission->fid) ,1);
      $msg = $visitor->name . ' submitted form ' . $hostpath . $base_path . $form_url . '.';
      $msg .= ' submission: ' . $hostpath . $base_path . $submission->details_url;
      $msg .= ' visitor: ' . $hostpath . $base_path . $visitor->uri();
      intel_twilio_send_sms($to_num, $msg);
    }
  }
}

function intel_twillio_validate_phone_number($number) {
  $pattern = '/^\+?\d{10,14}$/';  // e.164 pattern
  if (preg_match($pattern, $number)) {
    return $number;
  }
  return FALSE;
}

/**
 * Implements hook_intel_phone_call_data()
 */
function intel_twilio_intel_phone_call_data(&$visitor, &$phonecall, &$track, $context) {
  // if main contact form
  global $base_url, $base_path;
  if (isset($context['phonenumber_settings']) && !empty($context['phonenumber_settings']['send_sms'])) {
    $a = explode('//', $base_url);
    $base_url = $a[1];
    $to_num = $context['phonenumber_settings']['send_sms'];

    $msg = $visitor->name . ' called ' . $phonecall->to_num . '.';
    $msg .= ' visitor: ' . $base_url . $base_path . $visitor->uri();
    intel_twilio_send_sms($to_num, $msg);
  }
}

function intel_twilio_test_form($form, $form_state, $cid) {
  $form = array();
  $form['#action'] = '/twilio/voice/test';

  $phonecall = intel_phonecall_load($cid);

  if (is_string($phonecall->data)) {
    $phonecall->data = unserialize($phonecall->data);
  }
  unset($phonecall->data['twilio']['q']);

  foreach ($phonecall->data['twilio'] AS $key => $value) {
    $form[$key] = array(
      '#type' => 'textfield',
      '#title' => $key,
      '#default_value' => $value,
    );
  }

  $form['debug'] = array(
    '#type' => 'checkbox',
    '#title' => t('Debug'),
    '#default_value' => 1,
  );

  $form['save'] = array(
    '#type' => 'submit',
    '#value' => t('Make test call'),
  );

  return $form;
}