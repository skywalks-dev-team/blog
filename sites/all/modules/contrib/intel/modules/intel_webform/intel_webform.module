<?php

function intel_webform_menu() {
  $items = array();

  /*
  $items['node/%webform_menu/webform/intel'] = array(
    'title' => 'Intelligence',
    'page callback' => 'intel_webform_manage',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'file' => 'intel_webform.admin.inc',
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );
  */
  $items['intel_webform/intelvisitor/autocomplete/%'] = array(
    'page callback' => 'intel_webform_intelvisitor_autocomplete',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'intel_webform.webform_references.inc',
    'file path' => drupal_get_path('module', 'intel_webform'),
  );
  if (variable_get('intel_track_phonecalls', INTEL_TRACK_PHONECALLS_DEFAULT)) {
    $items['node/%webform_menu/webform/phone'] = array(
      'title' => 'Phone notifications',
      'page callback' => 'intel_webform_manage_phone',
      'page arguments' => array(1),
      'access callback' => 'node_access',
      'access arguments' => array('update', 1),
      'file' => 'intel_webform.admin.inc',
      'weight' => 1,
      'type' => MENU_LOCAL_TASK,
    );
  }
  $items['intel_webform/admin_submission_results_alter_js'] = array(
    'title' => '',
    'page callback' => 'intel_webform_admin_submission_results_alter_js',
    'access callback' => 'user_access',
    'access arguments' => array('view all intel reports'),
    'type' => MENU_CALLBACK,
    'file' => 'intel_webform.reports.inc',
  );
  return $items;
}

/**
 * Implements hook_page_alter
 *
 * @param $page
 */
/*
function intel_webform_page_alter(&$page) {
  if ((arg(0) == 'node') && (arg(2) == 'webform-results')) {
    drupal_add_js(drupal_get_path('module', 'intel_webform') . '/intel_webform.admin_submission_results_alter.js');
  }
}
*/

/**
 * Alter the list of select list options provided by Webform and other modules.
 *
 * @see hook_webform_select_options_info().
 */
function intel_webform_webform_select_options_info_alter(&$items) {
  // Remove the days of the week options.
  //unset($items['days']);
}

function intel_webform_webform_references_term_list_alter(&$term_list, $vid) {
  $vocab = taxonomy_vocabulary_load($vid);

  // check if webform_option field exists on vocab
  $fi = field_info_instance('taxonomy_term', 'field_webform_option', $vocab->machine_name);
  if (empty($fi)) {
    return;
  }
  $query = db_select('field_data_field_webform_option', 'f')
    ->fields('f')
    ->condition('entity_type', 'taxonomy_term')
    ->condition('bundle', $vocab->machine_name);
  $items = $query->execute()->fetchAllAssoc('entity_id');

  foreach ($term_list as $k => $v) {
    if (!empty($items[$k])) {
      $term_list[$k] = $items[$k]->field_webform_option_value;
    }
  }
}

/**
 * Implements hook_intel_page_settings_js_alter()
 * @param $settings
 */
function intel_webform_intel_page_settings_js_alter(&$settings) {
  if (is_array($settings['intel']['config']['trackForms'])) {
    $forms = intel_webform_track_forms();
    foreach ($forms AS $form) {
      $settings['intel']['config']['trackForms'][] = $form;
    }
    //dsm($forms);
    //if (!intel_webform_disable_track_forms() ) {
      //$settings['intel']['track_forms'][] = 'form.webform-client-form';
    //}
  }
}

function intel_webform_disable_track_forms($value = null) {
  static $flag;
  if (!isset($flag)) {
    $flag = 0;
  }
  if (isset($value)) {
    $flag = $value;
  }
  return $flag;
}

function intel_webform_track_forms($form = null, $action = 'set') {
  static $forms;
  if (!isset($forms)) {
    $forms = array();
  }
  if (isset($form)) {
    if ($action == 'unset') {
      if ($forms[$form]) {
        unset($forms[$form]);
      }
    }
    else {
      $forms[$form] = $form;
    }

  }
  return $forms;
}

/**
 * Implements hook_form_alter().
 */
function intel_webform_form_alter(&$form, &$form_state, $form_id) {
  // Webform is being presented to visitor.
  if (isset($form['#node']->webform) && in_array('webform_client_form_submit', $form['#submit'])) {
    // check for special fields
    if (!isset($form_state['intel_fields'])) {
      $form_state['intel_fields'] = array();
      if (isset($form['#node']->webform['components'])) {

        // loop through webform components to find any special fields
        $comps = &$form['#node']->webform['components'];
        foreach ($comps AS $i => $comp) {
          if ($comp['form_key'] == 'intel_submit_data') {
            $form_state['intel_fields']['intel_submit_data'] = $i;

          }
        }
      }
    }

    $track = 1;
    if (!empty($form_state['intel_fields']['intel_submit_data'])) {
      // disable tracking on multi page forms if not on first page
      if (isset($form_state['webform']['page_count']) && ($form_state['webform']['page_count'] > 1)) {
        if (isset($form_state['webform']['page_num']) && ($form_state['webform']['page_num'] > 1)) {
          intel_webform_disable_track_forms(1);
          $track = 0;
        }
      }
    }
    // note that webforms have a form id of webform-client-form-[nid] if a page form
    // and the format webform-client-form-[nid]--[other id] when used as a block
    if (!$track) {
      //intel_webform_track_forms('form#webform-client-form-' . $form['#node']->nid, 'unset');
      intel_webform_track_forms("form.webform-client-form[id^='webform-client-form-{$form['#node']->nid}']", 'unset');
    }
    else {
      //intel_webform_track_forms('form#webform-client-form-' . $form['#node']->nid);
      intel_webform_track_forms("form.webform-client-form[id^='webform-client-form-{$form['#node']->nid}']");
    }
    //dsm($form);
    //dsm($form_state);
  }
}



/**
 * Modify a Webform submission, prior to saving it in the database.
 *
 * @param $node
 *   The Webform node on which this submission was made.
 * @param $submission
 *   The Webform submission that is about to be saved to the database.
 */
function intel_webform_webform_submission_presave($node, &$submission) {
  global $base_path;

  $idents = array();
  $vtk = IntelVisitor::extractVtk();
  if (empty($vtk)) {
    return;
  }

  $api_level = intel_api_level();
  if ($api_level != 'pro') {
    return;
  }

  // cache in Drupal session also in case varnish or other caching is filtering
  // cookies
  intel_session_cookie_merge();

  $visitor = intel_visitor_load_or_create('user');
  $api_level = variable_get('intel_api_level', '');

  $wf_settings = variable_get('intel_webform_settings_node_' . $node->nid, array());
//dsm($wf_settings);
//dsm($submission);
//dsm($node->webform['components']);
  $merge_data = array();
  $update_name_prop = 0;
  $name_prop = $visitor->getProp('data.name');
  $prop_options = array(
    'source' => 'webform',
  );
  if (!empty($node->webform['components']) && is_array($node->webform['components'])) {
    foreach ($node->webform['components'] AS $cid => $component) {
      if (!empty($visitor->vid) && ($component['form_key'] == 'intel_vid')) {
        // webform 3 data format
        if (isset($submission->data[$cid]['value'][0])) {
          $submission->data[$cid]['value'][0] = $visitor->vid;
        }
        // webform 4 data format
        else {
          $submission->data[$cid][0] = $visitor->vid;
        }

      }
      if (!empty($visitor->vid) && ($component['form_key'] == 'intel_vtk')) {
        if (isset($submission->data[$cid]['value'][0])) {
          $submission->data[$cid]['value'][0] = $visitor->vtk;
        }
        else {
          $submission->data[$cid][0] = $visitor->vtk;
        }
      }
      if (!empty($visitor->vid) && ($component['form_key'] == 'intel_visitor_url')) {
        if (isset($submission->data[$cid]['value'][0])) {
          $submission->data[$cid]['value'][0] ='http://' . $_SERVER['HTTP_HOST'] . $base_path . $visitor->uri();
        }
        else {
          $submission->data[$cid][0] ='http://' . $_SERVER['HTTP_HOST'] . $base_path . $visitor->uri();
        }
      }
      if (!empty($component['extra']['intel_term_reference_action'])) {
        $vocab = taxonomy_vocabulary_load($component['extra']['referenceable_types']);
        $entity_settings = variable_get('intel_entity_settings_taxonomy__' . $vocab->machine_name, array());
        if (!empty($entity_settings['visitor_attribute']['key'])) {
          if ($component['extra']['intel_term_reference_action'] == 'set') {
            $key = 'attributes.' . $entity_settings['visitor_attribute']['key'];
            $var = array();
            if ($component['extra']['intel_term_reference_action'] == 'merge') {
              $var = $visitor->getVar('visitor', 'attributes', $entity_settings['visitor_attribute']['key'], array());
            }
            foreach ($submission->data[$cid] as $tid) {
              if ($tid) {
                $var[$tid] = '';
              }
            }
            // TODO: keep this to just storage place
            $visitor->setVar('visitor', 'attributes', $entity_settings['visitor_attribute']['key'], $var);
            //$visitor->setVar('api_visitor', 'attributes', $entity_settings['visitor_attribute']['key'], $var);
          }
        }

      }
      if (!empty($component['extra']['intel_field_map'])) {
        list($key, $elem) = explode(':', $component['extra']['intel_field_map']);

        if (!isset($merge_data[$key])) {
          $merge_data[$key] = array();
        }

        // name field maping of multiple keyed elements
        if ($elem == 'name_automap') {
          $comp_keys = array(
            'given' => 'first',
            'family' => 'last',
            'title' => 'title',
            'middle' => 'middle',
            'generational' => 'generational',
            'credentials' => 'credentials',
          );
          foreach ($comp_keys AS $comp_key => $intel_key) {
            if (!empty($submission->data[$cid]['value'][$comp_key])) {
              $merge_data[$key][$intel_key] = trim($submission->data[$cid]['value'][$comp_key]);
            }
            // support for webform 7.x-4.0 data format
            else if (!empty($submission->data[$cid][$comp_key])) {
              $merge_data[$key][$intel_key] = trim($submission->data[$cid][$comp_key]);
            }
          }
        }
        else {
          if (!empty($submission->data[$cid]['value'][0])) {
            $value = trim($submission->data[$cid]['value'][0]);
          }
          // support for webform 7.x-4.0 data format
          else if (!empty($submission->data[$cid][0])) {
            $value = trim($submission->data[$cid][0]);
          }

          // don't add value if it is blank
          if ($value) {
            $merge_data[$key][$elem] = $value;
          }
        }
      }
    }
  }

  $prop_options = array(
    'source' => 'form',
  );

  foreach ($merge_data AS $prop_name => $values) {
    $visitor->setProp($prop_name, $values, $prop_options);
  }

  $visitor->setLastActivity(REQUEST_TIME);

  if (isset($visitor->is_new) || count($merge_data)) {
    $visitor->updated = REQUEST_TIME;
  }

  $visitor->merge();
}

function intel_webform_webform_submission_insert($node, $submission) {
  // add timestamp of submission to break reverse proxy caching
  // only needed with webform 4. Check if conditionals array exists in webform
  // data to determine if webform 4.
  if (
    !empty($node->webform['redirect_url'])
    && ($node->webform['redirect_url'] != '<confirmation>')
  ) {
    $add = ($submission->sid + 46) % 100;
    $uri = intel_parse_url($node->webform['redirect_url']);
    if (!empty($uri['query'])) {
      $node->webform['redirect_url'] .= '&sid=A' . dechex($submission->completed) . '-' . $add;
    }
    else {
      $node->webform['redirect_url'] .= '?sid=A' . dechex($submission->completed) . '-' . $add;
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function intel_webform_node_insert($node) {
  intel_webform_node_save($node);
}

/**
 * Implements hook_node_insert().
 */
function intel_webform_node_update($node) {
  intel_webform_node_save($node);
}

function intel_webform_node_save($node) {
  if (isset($node->webform) && isset($node->webform['intel'])) {
    variable_set('intel_webform_settings_node_' . $node->nid, $node->webform['intel']);
  }
}


function intel_webform_node_load($nodes, $types) {
  // Quick check to see if we need to do anything at all for these nodes.
  $webform_types = webform_variable_get('webform_node_types');
  if (count(array_intersect($types, $webform_types)) == 0) {
    return;
  }
  foreach ($nodes AS $nid => $node) {
    if (!in_array($node->type, $webform_types)) {
      continue;
    }

    $data = variable_get('intel_webform_settings_node_' . $nid, FALSE);
    if (!empty($data)) {
      $nodes[$nid]->webform['intel'] = $data;
    }
  }
}

function intel_webform_form_webform_client_form_alter(&$form, &$form_state) {
  $form['intel_submit_data'] = array(
    '#type' => 'hidden',
    '#default_value' => '',
  );
  $form['#submit'][] = 'intel_webform_client_form_submit';
}

function intel_webform_client_form_submit(&$form, &$form_state) {
  if (!empty($form_state['values']['intel_submit_data'])) {
    $_SESSION['intel_webform_submit_data'] = $form_state['values']['intel_submit_data'];
  }
}

/**
 * Respond to a node deleted, only on webforms.
 */
function intel_webform_node_delete($node) {
  if (isset($node->webform) && isset($node->webform['intel'])) {
    variable_del('intel_webform_settings_node_' . $node->nid);
  }
}

/**
 * Implements hook_intel_intel_script
 */
function intel_webform_intel_intel_script() {
  $scripts['webform'] = array(
    'title' => t('Webform'),
    'description' => t('Used to track Webform submissions.'),
    'path' => drupal_get_path('module', 'intel_webform') . '/intel_webform.intel_webform.js',
    'enabled' => 1,
  );
  return $scripts;
}

/**
 * Implements hook_intel_form_submission_check
 */
function intel_webform_intel_form_submission_check(&$submission, &$track, &$submit_context, &$form_settings, &$link_query) {
  if (empty($_GET['sid']) && empty($_GET['iwfs'])) {
    return;
  }

  require_once './' . drupal_get_path('module', 'webform') . "/includes/webform.submissions.inc";
  if (!empty($_GET['sid']) ) {
    if (substr($_GET['sid'], 0, 1) == 'A') {
      $a = explode('-', substr($_GET['sid'], 1));
      $a[0] = hexdec($a[0]);
      $wfsubmissions = webform_get_submissions(array('completed' => $a[0]));
      foreach ($wfsubmissions AS $f) {
        if (($f->sid + 46)%100 == $a[1]) {
          $wfsubmission = $f;
        }
      }
    }
    else {
      $wfsubmissions = webform_get_submissions(array('sid' => $_GET['sid']));
      $wfsubmission = $wfsubmissions[$_GET['sid']];    // check if submission exists and if it is recent
    }
  }

  if (!empty($wfsubmission) && isset($wfsubmission->submitted)) {
    $link_query = array('sid' => $_GET['sid']);
    $wf_node = node_load($wfsubmission->nid);
    if (isset($wf_node->field_track_submission[$wf_node->language][0]['value'])) {
      $track['category_id'] = $wf_node->field_track_submission[$wf_node->language][0]['value'];
    }
    if (isset($wf_node->field_track_submission_value[$wf_node->language][0]['value'])) {
      $track['category_id'] = $wf_node->field_track_submission_value[$wf_node->language][0]['value'];
    }

    $submission->type = 'webform';
    $submission->fid = $wfsubmission->nid;
    $submission->fsid = $wfsubmission->sid;
    $submission->details_url = "node/{$wfsubmission->nid}/submission/{$wfsubmission->sid}";

    $track['form_title'] = $wf_node->title;
    $track['submission_path'] = $submission->details_url;
    $track['system_path'] = "node/{$wfsubmission->nid}";
    $track['oa']['rc'] = 'form';
    $track['oa']['rl'] = $track['system_path'];
    $track['oa']['rid'] = $submission->fid;
    $track['oa']['rt'] = 'node';
    $track['oa']['rt2'] = 'webform';

    $wf_node = node_load($wfsubmission->nid);
    if (isset($wf_node->webform['intel'])) {
      $form_settings = $wf_node->webform['intel'];
    }
    // check if intel_submit_data component exists
    $data_cid = -1;
    $og_cid = -1;
    if (!empty($wf_node->webform['components']) && is_array($wf_node->webform['components'])) {
      foreach ($wf_node->webform['components'] AS $cid => $component) {
        if ($component['form_key'] == 'intel_submit_data') {
          $data_cid = $cid;
        }
        if ($component['form_key'] == 'og_group_ref') {
          $og_cid = $cid;
        }
      }
    }
    // if component exists, set submit context
    if ($data_cid >= 0) {
      if (isset($wfsubmission->data[$data_cid]['value'][0])) {
        $submit_context = json_decode($wfsubmission->data[$data_cid]['value'][0], TRUE);
      }
      // support webform 4.0 data format
      else if (isset($wfsubmission->data[$data_cid][0])) {
        $submit_context = json_decode($wfsubmission->data[$data_cid][0], TRUE);
      }
    }
    // check if data is in session var
    if (!empty($_SESSION['intel_webform_submit_data'])) {
      $submit_context = json_decode($_SESSION['intel_webform_submit_data'], TRUE);
      unset($_SESSION['intel_webform_submit_data']);
    }
    // if component exists, set submit context
    if ($og_cid >= 0) {
      if (isset($wfsubmission->data[$og_cid]['value'][0])) {
        $submission->og_gid = $track['oa']['og'] = $wfsubmission->data[$og_cid]['value'][0];
      }
      // support webform 4.0 data format
      else if (isset($wfsubmission->data[$og_cid][0])) {
        $submission->og_gid = $track['oa']['og'] = $wfsubmission->data[$og_cid][0];
      }
    }
  }
}

function intel_webform_form_webform_component_edit_form_alter(&$form, $form_state, $node) {
  $nid = $form['nid']['#value'];
  $cid = $form['cid']['#value'];
  $type = $form['type']['#value'];
  $node = node_load($nid);
  // get existing component, empty array if new component
  $component = (isset($node->webform['components'][$cid])) ? $node->webform['components'][$cid] : array();

  $options = array(
    '' => t(' - None - '),
  );
  $prop_info = intel_get_visitor_property_info();

  if ($type == 'email') {
    $options['email:email'] = t('Email');
  }
  // phone field (contrib module)
  if ($type == 'phone') {
    $options['phone:phone'] = t('Phone');
  }
  // name field (contrib module)
  if ($type == 'name') {
    $options['name:name_automap'] = t('Name (auto-map elements)');
  }
  // TODO: get this auto building from intel properties
  if ($type == 'textfield') {
    $options['name:full'] = t('Full name');
    $options['name:first'] = t('First name');
    $options['name:last'] = t('Last name');
    $options['facebook:url'] = t('Facebook (url)');
    $options['twitter:username'] = t('Twitter (username)');
    $options['twitter:url'] = t('Twitter (url)');
    $options['linkedin:url'] = t('LinkedIn (url)');
    $options['website:url'] = t('Website');
  }
  // if term reference, check if vocab is set on intel visitor
  if ($type == 'term_reference') {
    $tr_options = array(
      '' => '- ' . t('None (Do not save)') . ' -',
      //'set' => t('Set visitor attribute to match only the terms submitted.'),
      'merge' => t('Add term to visitor attribute'),
    );
    $form['extra']['intel_term_reference_action'] = array(
      '#type' => 'select',
      '#title' => t('Save to Intel visitor property'),
      '#description' => t('Select if you would like to save the submission value to visitor fields referencing the same vocabulary. If matching field does not exist on visitor, data will be ignored.'),
      '#options' => $tr_options,
      '#default_value' => isset($component['extra']['intel_term_reference_action']) ? $component['extra']['intel_term_reference_action'] : '',
    );
    // TODO
    /*
    $visitor_fi = field_info_instances('intel_visitor');
    if (!empty($visitor_fi['intel_visitor'])) {
      foreach ($visitor_fi['intel_visitor'] as $field_name => $field_instance) {
        $fi = field_info_field($field_name);
        dsm($fi);
      }
    }

    dsm($visitor_fi);
    */
  }
  if (count($options) > 1) {
    $form['extra']['intel_field_map'] = array(
      '#type' => 'select',
      '#title' => t('Save to Intel visitor property'),
      '#description' => t('To save this components submission data to Intel visitor data, select which property to map this component. '),
      '#options' => $options,
      '#default_value' => isset($component['extra']['intel_field_map']) ? $component['extra']['intel_field_map'] : '',
    );
  }
}

function intel_webform_present_components() {
  $components = array();
  $weight = 0;
  $components['first_name'] = array(
    'name' => t('First name'),
    'form_key' => 'first_name',
    'type' => 'textfield',
    'mandatory' => 1,
    'weight' => $weight++,
    'pid' => 0,
    'extra' => array(
      'title_display' => 'before',
      'private' => 0,
      'intel_field_map' => 'name:first',
    ),
  );
  $components['last_name'] = array(
    'name' => t('Last name'),
    'form_key' => 'last_name',
    'type' => 'textfield',
    'mandatory' => 1,
    'weight' => $weight++,
    'pid' => 0,
    'extra' => array(
      'title_display' => 'before',
      'private' => 0,
      'intel_field_map' => 'name:last',
    ),
  );
  $components['email'] = array(
    'name' => t('Email'),
    'form_key' => 'email',
    'type' => 'email',
    'mandatory' => 1,
    'weight' => $weight++,
    'pid' => 0,
    'extra' => array(
      'title_display' => 'before',
      'private' => 0,
      'intel_field_map' => 'email:email',
    ),
  );
  $components['phone'] = array(
    'name' => t('Phone number'),
    'form_key' => 'phone',
    'type' => 'phone',
    'mandatory' => 1,
    'weight' => $weight++,
    'pid' => 0,
    'extra' => array(
      'title_display' => 'before',
      'private' => 0,
      'intel_field_map' => 'phone:phone',
    ),
  );
  $components['website'] = array(
    'name' => t('Website'),
    'form_key' => 'website',
    'type' => 'textfield',
    'mandatory' => 0,
    'weight' => $weight++,
    'pid' => 0,
    'extra' => array(
      'title_display' => 'before',
      'private' => 0,
      'intel_field_map' => 'website:url',
    ),
  );
  $components['twitter_username'] = array(
    'name' => t('Twitter username'),
    'form_key' => 'twitter_username',
    'type' => 'textfield',
    'mandatory' => 0,
    'weight' => $weight++,
    'pid' => 0,
    'extra' => array(
      'title_display' => 'before',
      'private' => 0,
      'intel_field_map' => 'twitter:username',
    ),
  );
  $components['facebook_url'] = array(
    'name' => t('Facebook page'),
    'form_key' => 'facebook_url',
    'type' => 'textfield',
    'mandatory' => 0,
    'weight' => $weight++,
    'pid' => 0,
    'extra' => array(
      'title_display' => 'before',
      'private' => 0,
      'intel_field_map' => 'facebook:url',
    ),
  );
  $components['linkedin_url'] = array(
    'name' => t('LinkedIn profile'),
    'form_key' => 'linkedin_url',
    'type' => 'textfield',
    'mandatory' => 0,
    'weight' => $weight++,
    'pid' => 0,
    'extra' => array(
      'title_display' => 'before',
      'private' => 0,
      'intel_field_map' => 'linkedin:url',
    ),
  );
  $components['organization_name'] = array(
    'name' => t('Organization'),
    'form_key' => 'organization_name',
    'type' => 'textfield',
    'mandatory' => 0,
    'weight' => $weight++,
    'pid' => 0,
    'extra' => array(
      'title_display' => 'before',
      'private' => 0,
      'intel_field_map' => 'organization:name',
    ),
  );
  $components['organization_title'] = array(
    'name' => t('Title'),
    'form_key' => 'organization_title',
    'type' => 'textfield',
    'mandatory' => 0,
    'weight' => $weight++,
    'pid' => 0,
    'extra' => array(
      'title_display' => 'before',
      'private' => 0,
      'intel_field_map' => 'organization:title',
    ),
  );
  $components['subject'] = array(
    'name' => 'Subject',
    'form_key' => 'subject',
    'type' => 'textfield',
    'mandatory' => 1,
    'weight' => $weight++,
    'pid' => 0,
    'extra' => array(
      'title_display' => 'before',
      'private' => 0,
    ),
  );
  $components['message'] = array(
    'name' => 'Message',
    'form_key' => 'message',
    'type' => 'textarea',
    'mandatory' => 1,
    'weight' => $weight++,
    'pid' => 0,
    'extra' => array(
      'title_display' => 'before',
      'private' => 0,
    ),
  );
  return $components;
}

function intel_webform_existing_components($exclude_presets = FALSE, $ignore = array(), $ignore_type = array()) {
  $query = db_select('webform_component', 'c')
    ->fields('c');
  $result = $query->execute();

  $ignore[] = 'mailchimp';
  $ignore[] = 'email_updates';
  $ignore[] = 'intel_visitor_url';

  if ($exclude_presets) {
    $ignore = array_merge($ignore, array_keys(intel_webform_present_components()));
  }

  $components = array();

  while ($r = $result->fetchAssoc()) {
    $key = $r['form_key'];
    if (!isset($components[$key]) && !in_array($key, $ignore) && !in_array($r['type'], $ignore_type)) {
      $r['extra'] = unserialize($r['extra']);
      $components[$key] = $r;
    }
  }

  return $components;
}

function intel_webform_setup_webform_config(&$node) {
  $webform = &$node->webform;
  $existing_comps = array();
  foreach ($webform['components'] AS $cid => $comp) {
    $existing_comps[$comp['form_key']] = $comp;
  }
  $cid = count($webform['components']) + 1;
  if (!isset($existing_comps['intel_visitor_url'])) {
    $webform['components'][$cid] = array(
      'name' => 'Visitor intel',
      'form_key' => 'intel_visitor_url',
      'type' => 'hidden',
      'mandatory' => 0,
      'weight' => 99,
      'pid' => 0,
      'extra' => array(
        'hidden_type' => 'hidden',
        'private' => 0,
      ),
    );
    $cid++;
  }

  if (module_exists('webform_mailchimp') && !isset($existing_comps['email_updates'])) {
    $list_id = variable_get('intel_mailchimp_default_list_id', '');
    if ($list_id) {
      $webform['components'][$cid] = array(
        'name' => 'Email updates',
        'form_key' => 'email_updates',
        'type' => 'mailchimp',
        'mandatory' => 0,
        'weight' => 100,
        'pid' => 0,
        'extra' => array(
          'mailchimp_list' => $list_id,
          'use_existing_email_field' => 'email',
          'checkbox_label' => 'Subscribe to updates',
          'checkbox_checked_by_default' => 1,
          'checkbox_hidden' => 1,
          'mergefields' => 'FNAME|first_name
  LNAME|last_name',
          'title_display' => 'before',
          'private' => 0,
        ),
      );
    }
  }
}

/*********************************************
 * Intel Visitor reference component
 */

/**
 * Implements hook_webform_component_info().
 */
function intel_webform_webform_component_info() {
  $components = array();
  $features = array(
    // Add content to CSV downloads. Defaults to TRUE.
    'csv'           => TRUE,
    // Show this component in e-mailed submissions. Defaults to TRUE.
    'email'         => TRUE,
    // Allow this component to be used as an e-mail FROM or TO address.
    // Defaults to FALSE.
    'email_address' => FALSE,
    // Allow this component to be used as an e-mail SUBJECT or FROM name.
    // Defaults to FALSE.
    'email_name'    => FALSE,
    // This component may be toggled as required or not. Defaults to TRUE.
    'required'      => TRUE,
    // This component has a title that can be toggled as displayed or not.
    'title_display' => TRUE,
    // This component has a title that can be displayed inline.
    'title_inline'  => TRUE,
    // If this component can be used as a conditional SOURCE. All components
    // may always be displayed conditionally, regardless of this setting.
    // Defaults to TRUE.
    'conditional'   => TRUE,
    // If this component allows other components to be grouped within it
    // (like a fieldset or tabs). Defaults to FALSE.
    'group'         => FALSE,
    // If this component can be used for SPAM analysis, usually with Mollom.
    'spam_analysis' => FALSE,
    // If this component saves a file that can be used as an e-mail
    // attachment. Defaults to FALSE.
    'attachment'    => FALSE,
  );
  $components['intelvisitor_reference'] = array(
    'label'       => t('Visitor Reference'),
    'description' => t('Visitor Reference field.'),
    'features'    => $features,
    'file'        => 'intel_webform.webform_references.inc',
  );
  return $components;
}

/**
 * Implements hook_system_info_alter().
 *
 * Add warning message to module info description if any component
 * of this module is added in any webform.
 */
function intel_webform_system_info_alter(&$info, $file, $type) {
  if ($type == 'module' && $file->name == 'intel_webform') {
    $result = db_select('webform_component', 'wc')
      ->fields('wc', array('name'))
      ->condition('wc.type', array('intelvisitor_reference'), 'IN')
      ->execute()->fetchAll();
    if (!empty($result)) {
      $info['description'] = t("Defines a webform component type for referencing Intelligence Visitors. <span class='error'>(Warning: Don't disable/uninstall the module because some components of this module are in used.)</span>");
    }
  }
}
