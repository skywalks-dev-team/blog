<?php


/**
 *  Implements of hook_menu()
 */
function intel_realtime_menu() {
  $items = array();

  $items['intel/attribute_option_info_js'] = array(
    'title' => '',
    'page callback' => 'intel_realtime_attribute_option_info_js',
    'access callback' => 'user_access',
    'access arguments' => array('view all intel reports'),
    'type' => MENU_CALLBACK,
  );
  $items['intel/visitor_load_js'] = array(
    'title' => '',
    'page callback' => 'intel_realtime_visitor_load_js',
    'access callback' => 'user_access',
    'access arguments' => array('view all intel reports'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/reports/intel/realtime'] = array(
      'title' => 'Realtime',
      'page callback' => 'intel_realtime_dashboard_report_page',
      'access callback' => 'user_access',
      'access arguments' => array('view all intel reports'),
      'type' => MENU_LOCAL_TASK,
      //'file' => 'reports/intel.report_scorecard.inc',
  );
  $items['admin/reports/intel_realtime/log'] = array(
    'title' => 'Realtime log',
    'page callback' => 'intel_realtime_log_page',
    'access callback' => 'user_access',
    'access arguments' => array('view all intel reports'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'intel_realtime.admin.inc',
  );

  $items['admin/reports/intel_realtime/log/%intel_realtime_log'] = array(
    'title' => 'Realtime log hit',
    'page callback' => 'intel_realtime_log_hit_page',
    'page arguments' => array(4),
    'access callback' => 'user_access',
    'access arguments' => array('view all intel reports'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'file' => 'intel_realtime.admin.inc',
  );

  $items['admin/reports/intel_realtime/log/clear'] = array(
    'title' => 'Realtime log clear',
    'page callback' => 'intel_realtime_log_clear_page',
    'access callback' => 'user_access',
    'access arguments' => array('view all intel reports'),
    'type' => MENU_LOCAL_ACTION,
    'weight' => 1,
    'file' => 'intel_realtime.admin.inc',
  );

  return $items;
}

function intel_realtime_log_load($id) {
  $query = db_select('intel_realtime', 'l')
    ->fields('l')
    ->condition('id', $id);
  //$v = $query->leftJoin('intel_visitor', 'v', '%alias.vid = s.vid');
  $hit = $query->execute()->fetchObject();
  return $hit;
}

function intel_realtime_log_load_filtered($filter = array(), $options = array(), $header = array(), $limit = 100, $offset = NULL) {
  $query = db_select('intel_realtime', 'l')
    ->fields('l')
    ->extend('PagerDefault')
    ->orderBy('time', 'ASC')
    ->orderBy('ord', 'ASC')
    ->limit($limit);

  if (!empty($header)) {
    $query->extend('TableSort')->orderByHeader($header);
  }

  //TODO get filters working
  if (!empty($filter['where'])) {
    //$sql .= " WHERE " . (($options['mode'] == 'site') ? 'k.priority >= 0 AND ' : '') . $filter['where'];
    //$count_sql .=  " WHERE " . (($options['mode'] == 'site') ? 'k.priority >= 0 AND ' : '') .  $filter['where'];
  }
  if (!empty($filter['conditions'])) {
    foreach ($filter['conditions'] AS $condition) {
      if (count($condition) == 3) {
        $query->condition($condition[0], $condition[1], $condition[2]);
      }
      else {
        $query->condition($condition[0], $condition[1]);
      }
    }
  }

  $result = $query->execute();

  return $result;
}

function intel_realtime_log_clear($time = 0) {
  $query = db_delete('intel_realtime')
    ->condition('time', (REQUEST_TIME - $time), '<=');
  $query->execute();
}

function intel_realtime_attribute_option_info_js($mode = 'visitor', $pa_key = '', $option_id = '') {
  $response = array();
  if (empty($pa_key) || empty($option_id)) {
    intel_json_output_error(INTEL_STATUS_BAD_REQUEST);
  }

  $data = intel_get_attribute_option_info($mode, $pa_key, $option_id);

  if (empty($data['title'])) {
    intel_json_output_error(INTEL_STATUS_NOT_FOUND);
  }

  $response['option'] = array(
    'mode' => $mode,
    'type' => $pa_key,
    'id' => $option_id,
  );

  $response['option']['title'] = $data['title'];

  intel_json_output($response);

  //return print_r($response, 1);
}

function intel_realtime_visitor_load_js() {
  $response = array();
  if (empty($_GET['vtk'])) {
    intel_json_output_error(INTEL_STATUS_BAD_REQUEST);
  }
  $visitor = intel_visitor_load($_GET['vtk']);
  if (empty($visitor)) {
    intel_json_output_error(INTEL_STATUS_NOT_FOUND);
  }
  $response['vtk'] = $_GET['vtk'];
  $response['visitor'] = $visitor->data;
  $response['visitor']['name'] = $visitor->name;
  $response['visitor']['vid'] = (int)$visitor->vid;
  intel_json_output($response);
}

function intel_json_output($data, $message = '') {
  $response = $data;
  $response['status'] = INTEL_STATUS_OK;
  if ($message) {
    $response['message'] = $message;
  }
  drupal_json_output($response);
  exit;
}

function intel_json_output_error($status, $message = '') {
  $response['status'] = $status;
  if ($message) {
    $response['message'] = $message;
  }
  drupal_json_output($response);
  exit;
}

function intel_realtime_dashboard_report_page() {
  global $base_path;
  $realtime_path = $base_path . intel_get_library_path() . '/realtime';
  $timeline_path = $base_path . libraries_get_path('TimelineJS');

  $js = array();

  // add jquery ui
  $js[] = 'http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js';
  $js[] = '//ajax.googleapis.com/ajax/libs/jqueryui/1.10.4/jquery-ui.min.js';

  // add google jsapi
  $js[] = 'https://www.google.com/jsapi';
  $js[] = 'https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false';

  // add timeline libs
  $js[] = $timeline_path . '/compiled/js/storyjs-embed.js';
  $js[] = $timeline_path . '/compiled/js/timeline-intel.js';

  // add realtime dashboard libs
  $js[] = $realtime_path . '/reports/js/lib.js';
  $js[] = $realtime_path . '/reports/js/rtd.model.js';
  $js[] = $realtime_path . '/reports/js/rtd.view.js';
  $js[] = $realtime_path . '/reports/js/rtd.config.js';

  $filepath = $base_path . variable_get('intel_visitor_default_image_path', '');
  if (empty($filepath)) {
    $filepath = $base_path . variable_get('user_picture_default', '');
  }
  if (!$filepath) {
    $filepath = $base_path . intel_get_library_path() . '/images/default_user.png';
  }

  require_once './' . drupal_get_path('module', 'intel') . "/includes/intel.ga.inc";
  $attrInfo = array(
    'page' => intel_get_page_attribute_info(),
    'visitor' => intel_get_visitor_attribute_info(),
  );

  //dsm($attrInfo['page']);
  //return '';

  // removing select attributes to simplify demo
  unset($attrInfo['page']['pt']);
  unset($attrInfo['page']['et']);

  $attrInfo['page']['t']['title'] = t('Terms');

  // initialize options arrays that are not set just to save some checks in js
  foreach ($attrInfo['page'] AS $key => $value) {
    if (!isset($value['options'])) {
      $attrInfo['page'][$key]['options'] = array();
    }
  }

  foreach ($attrInfo['visitor'] AS $key => $value) {
    if (!isset($value['options'])) {
      $attrInfo['visitor'][$key]['options'] = array();
    }
  }

  $settings = array(
    'cmsPath' => $base_path,
    'apiPath' => $realtime_path,
    'dataPath' => $base_path . 'intel',
    'imgPath' => $base_path . intel_get_library_path() . '/images',
    'defaultVisitorImg' => $filepath,
    'icons' => array(
      'link-ext' => 'icon-link-ext',
      'link-ext-alt' => 'icon-link-ext-alt',
    ),
    'attrInfo' => $attrInfo,
    'queryParams' => (object) array(),
  );

  $css = array();
  $css[] = 'http://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700|Dancing+Script|Antic+Slab';

  // add dashboard styling
  $css[] = $realtime_path . '/reports/css/rtd-layout.css';
  $css[] = $realtime_path . '/reports/css/rtd-colors-archer.css';

  $css[] = $base_path . intel_get_library_path() . '/icons/css/intel.css';

  $output = '<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">' . "\n";
  $output .= '<html>' . "\n";
  $output .= '<head>' . "\n";
  $output .= '  <title>Open Enterprise Intelligence</title>' . "\n";
  $output .= '  <script>' . "\n";
  $output .= '    rtdSettings = ' . json_encode($settings) . "\n";
  $output .= '  </script>' . "\n";
  foreach ($js AS $j) {
    $output .= '  <script src="' . $j . '"></script>' . "\n";
  }

  foreach ($css AS $c) {
    $output .= '  <link href="' . $c . '"  rel="stylesheet" type="text/css">' . "\n";
  }

  $output .= '</head>' . "\n";
  $output .= '<body>' . "\n";
  $output .= '</body>' . "\n";
  $output .= '</html>' . "\n";
  print $output;
  exit;

}

/**
 * Implements hook_cron()
 * Clear out data older than 24 hours
 */
function intel_realtime_cron() {
  intel_realtime_log_clear(60 * 60 * 24);
}