<?php

/**
 *  Implements of hook_menu()
 */
function intel_og_menu() {
  $items = array();
  $items['admin/config/intel/og'] = array(
    'title' => 'Organic Groups',
    'description' => 'Setup ',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('intel_og_admin_config_form'),
    'access callback' => 'user_access',
    'access arguments' => array('admin intel'),
    //'type' => MENU_LOCAL_TASK,
    'file' => 'intel_og.admin.inc',
  );
  $items['group/%/%/admin/intel'] = array(
    'title callback' => 'Intel',
    //'title arguments' => array('People in group @group', 1, 2),
    //'description' => 'Find and manage group members.',
    'page callback' => 'intel_og_admin_page',
    'page arguments' => array(1, 2),
    'access callback' => 'og_ui_user_access_group',
    'access arguments' => array('view referenced reports', 1, 2),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'intel_og.admin.inc',
  );

  $items['group/%/%/admin/intel/analytics'] = array(
    'title' => 'Analytics',
    'page callback' => 'intel_scorecard_report_page',
    'page arguments' => array('-', '-', '-', 'og_group', 2),
    //'page arguments' => array('-', 'page-attr', 'og', 2),
    //'page arguments' => array('-', '-', '-', 'node', 1),
    'access callback' => 'og_ui_user_access_group',
    'access arguments' => array('view referenced reports', 1, 2),
    'file path' => drupal_get_path('module', 'intel'),
    'file' => 'reports/intel.report_scorecard.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['group/%/%/admin/intel/analytics/scorecard'] = array(
    'title' => 'Scorecard',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );
  $items['group/%/%/admin/intel/analytics/dashboard'] = array(
    'title' => 'Dashboard',
    'page callback' => 'intel_dashboard_report_page',
    'page arguments' => array('-', '-', '-', 'og_group', 2),
    //'page arguments' => array('-', 'page-attr', 'og', 2),
    'access callback' => 'og_ui_user_access_group',
    'access arguments' => array('view referenced reports', 1, 2),
    'type' => MENU_LOCAL_TASK,
    'file path' => drupal_get_path('module', 'intel'),
    'file' => 'reports/intel.report_dashboard.inc',
  );

  $items['group/%/%/admin/intel/people'] = array(
    'title' => 'People',
    'description' => 'Information about visitors.',
    'page callback' => 'intel_og_admin_people_contacts',
    'page arguments' => array(1, 2),
    'access callback' => 'og_ui_user_access_group',
    'access arguments' => array('view referenced intel visitors', 1, 2),
    'type' => MENU_LOCAL_TASK,
    'file' => 'intel_og.admin.inc',
  );
  $items['group/%/%/admin/intel/people/contacts'] = array(
    'title' => 'Contacts',
    'description' => 'Information about visitors.',
    'page callback' => 'intel_og_admin_people_contacts',
    'page arguments' => array(1, 2),
    'access callback' => 'og_ui_user_access_group',
    'access arguments' => array('view referenced intel visitors', 1, 2),
    'type' => MENU_LOCAL_TASK,
    'file' => 'intel_og.admin.inc',
  );
  $items['group/%/%/admin/intel/people/submissions'] = array(
    'title' => 'Submissions',
    'description' => 'Information about visitors.',
    'page callback' => 'intel_og_admin_people_submissions',
    'page arguments' => array(1, 2),
    'access callback' => 'og_ui_user_access_group',
    'access arguments' => array('view referenced intel submissions', 1, 2),
    'type' => MENU_LOCAL_TASK,
    'file' => 'intel_og.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_menu_alter()
 *
 * Alter page analytics tab permissions to give group member access
 *
 * @param $items
 */
function intel_og_menu_alter(&$items) {
  foreach ($items as $router_path => $item) {
    if (strpos($router_path, 'node/%node/intel') !== FALSE) {
      $items[$router_path]['access callback'] = '_intel_og_permission_access_content_report';
      $items[$router_path]['access arguments'] = array(1);
    }
    /*
    if (strpos($router_path, 'node/%node/analytics') !== FALSE) {
      $items[$router_path]['access callback'] = '_intel_og_permission_access_content_report';
      $items[$router_path]['access arguments'] = array(1);
    }
    */
  }
}

function _intel_og_permission_access_content_report($node) {
  static $access;
  if (isset($access)) {
    return $access;
  }
  $access = FALSE;
  if (_intel_permission_access_content_report()) {
    $access = TRUE;
  }
  else {
    // try to get gid by og_context first, then see if og_group_ref on node
    $group_type = variable_get('intel_og_default_group_type', 'node');
    $gid = 0;

    $og_context = og_context($group_type);
    if (!empty($og_context['gid'])) {
      $gid = $og_context['gid'];
    }
    if (!$gid) {
      $lang = isset($node->language) ? $node->language : LANGUAGE_NONE;
      if (isset($node->og_group_ref) && isset($node->og_group_ref[$lang][0]['target_id'])) {
        $gid = $node->og_group_ref[$lang][0]['target_id'];
      }
    }
    if ($gid) {
      $access = og_user_access($group_type, $gid, 'view referenced reports');
    }
  }

  return $access;
  /*
  $wrapper = new EntityDrupalWrapper('node', $node->nid);
  if (!isset($wrapper->og_group_ref)) {
    return FALSE;
  }
  $franchise = $wrapper->og_group_ref->value();
  if (!empty($franchise->fid)) {
    return og_user_access('dwyr_franchise', $franchise->fid, 'view intel reports');
  }
  else {
    return FALSE;
  }
  */


}

function intel_og_intel_reports_alter(&$reports) {
  $reports['content']['pa-og'] = array(
    'key' => 'page_attribute:og.top.entrance',
    'title' => t('Segment') . ': ' . t('Organic groups'),
    'page callback' => 'intel_page_attribute_list_report_page',
    'intel_api_access' => 'basic',
    'file' => 'reports/intel.report_page_attribute_list.inc'
  );
}

/**
 * Implements hook_og_permission().
 */
function intel_og_og_permission() {
  $items = array();

  $items['view referenced reports'] = array(
    'title' => t('View referenced analytics reports'),
    'description' => t('Provides access to analytics reports for traffic on group pages.'),
    'roles' => array(OG_AUTHENTICATED_ROLE, OG_ADMINISTRATOR_ROLE),
  );

  $items['view referenced intel visitors'] = array(
    'title' => t('View referenced visitor intel'),
    'description' => t('Enabled visitors that have been linked with the group to be viewed by group members.'),
    'roles' => array(OG_AUTHENTICATED_ROLE, OG_ADMINISTRATOR_ROLE),
  );

  $items['update referenced intel visitors'] = array(
    'title' => t('Edit referenced visitor intel'),
    'description' => t('Enables editing of visitors linked to the group.'),
    'roles' => array(OG_AUTHENTICATED_ROLE, OG_ADMINISTRATOR_ROLE),
  );

  $items['delete referenced intel visitors'] = array(
    'title' => t('Delete referenced visitors'),
    'description' => t('Enables deleting of visitors linked to the group.'),
    'roles' => array(OG_AUTHENTICATED_ROLE, OG_ADMINISTRATOR_ROLE),
  );

  $items['view referenced intel submissions'] = array(
    'title' => t('View referenced submission metadata'),
    'roles' => array(OG_AUTHENTICATED_ROLE, OG_ADMINISTRATOR_ROLE),
  );

  $items['view referenced webform submissions'] = array(
    'title' => t('View referenced webform submissions'),
    'roles' => array(OG_AUTHENTICATED_ROLE, OG_ADMINISTRATOR_ROLE),
  );

  $items['update referenced webform submissions'] = array(
    'title' => t('Edit referenced webform submissions'),
    'roles' => array(OG_AUTHENTICATED_ROLE, OG_ADMINISTRATOR_ROLE),
  );

  $items['delete referenced webform submissions'] = array(
    'title' => t('Delete referenced webform submissions'),
    'roles' => array(OG_AUTHENTICATED_ROLE, OG_ADMINISTRATOR_ROLE),
  );

  return $items;
}

function intel_og_intel_visitor_access($visitor, $op = 'view', $account = NULL) {
  //$args = func_get_args();
  //dsm($args);
  global $user;
  $account = isset($account) ? $account : $user;
  //dsm($account);

  if (empty($visitor->vid)) {
    return FALSE;
  }
  $vars = array(
    'artifact_type' => 'visitor',
    'aid' => $visitor->vid,
  );
  $intel_og_artifact = intel_og_artifact_load_by_vars($vars);
  if (empty($intel_og_artifact->gid)) {
    return FALSE;
  }
  //dsm($intel_og_artifact);

  $group_type = variable_get('intel_og_default_group_type', 'node');
  //dsm($group_type);

  switch ($op) {
    case 'view':
      return og_user_access($group_type, $intel_og_artifact->gid, 'view referenced intel visitors', $account);
    case 'update':
      return og_user_access($group_type, $intel_og_artifact->gid, 'update referenced intel visitors', $account);
    case 'delete':
      return og_user_access($group_type, $intel_og_artifact->gid, 'delete referenced intel visitors', $account);
  }
  return FALSE;
}

function intel_og_intel_submission_access($submission, $op = 'view', $account = NULL) {
  //$args = func_get_args();
  //dsm($args);
  global $user;
  $account = isset($account) ? $account : $user;
  //dsm($account);

  if (empty($submission->sid)) {
    return FALSE;
  }
  $vars = array(
    'artifact_type' => 'submission',
    'aid' => $submission->sid,
  );
  $intel_og_artifact = intel_og_artifact_load_by_vars($vars);
//dsm($intel_og_artifact);
  if (empty($intel_og_artifact->gid)) {
    return FALSE;
  }
  //dsm($intel_og_artifact);

  $group_type = variable_get('intel_og_default_group_type', 'node');
  //dsm($group_type);

  switch ($op) {
    case 'view':
    case 'list':
      return og_user_access($group_type, $intel_og_artifact->gid, 'view referenced intel submissions', $account);
  }
  return FALSE;
}

/**
 * Implements hook_webform_submission_access().
 *
 * @see webform_submission_access()
 */
function intel_og_webform_submission_access($node, $submission, $op = 'view', $account = NULL) {
  //$args = func_get_args();
 // dsm($args);
  global $user;
  $account = isset($account) ? $account : $user;
  //dsm($account);

  if (empty($submission->sid)) {
    return FALSE;
  }

  $vars = array(
    'type' => 'webform',
    'fid' => $submission->nid,
    'fsid' => $submission->sid,
  );
  $intel_submission = intel_submission_load_by_vars($vars);
  if (empty($intel_submission->sid)) {
    return FALSE;
  }
  //dsm($intel_submission);

  $vars = array(
    'artifact_type' => 'submission',
    'aid' => $intel_submission->sid,
  );
  $intel_og_artifact = intel_og_artifact_load_by_vars($vars);
  if (empty($intel_og_artifact->gid)) {
    return FALSE;
  }
  //dsm($intel_og_artifact);

  $group_type = variable_get('intel_og_default_group_type', 'node');
  //dsm($group_type);

  switch ($op) {
    case 'view':
      return og_user_access($group_type, $intel_og_artifact->gid, 'view referenced webform submissions', $account);
    case 'edit':
      return og_user_access($group_type, $intel_og_artifact->gid, 'edit referenced webform submissions', $account);
    case 'delete':
      return og_user_access($group_type, $intel_og_artifact->gid, 'delete referenced webform submissions', $account);
  }
  return FALSE;
}

function intel_og_artifact_load($artifact_type, $aid) {
  $vars = array(
    'artifact_type' => $artifact_type,
    'aid' => $aid,
  );
  return intel_og_artifact_load_by_vars($vars);
}

function intel_og_artifact_load_by_vars($vars) {
  $query = db_select('intel_og_artifact', 'a')
    ->fields('a');
  foreach ($vars AS $key => $value) {
    $query->condition($key, $value);
  }
  $artifact = $query->execute()->fetchObject();
  return $artifact;
}

/**
 * Implements hook_intel_page_intel_pushes()
 *
 */
function intel_og_intel_page_intel_pushes() {
  $og_context = og_context();

  if (empty($og_context['gid'])) {
    return;
  }

  /*
  $l10i_var_action = array(
    'method' => '_setIntelVar',
    'scope' => 'page',
    'namespace' => 'analytics',
    'keys' => 'og',
    'value' => $og_context['gid'],
  );
  intel_add_page_intel_push($l10i_var_action);
  */
  intel_add_page_intel_push(array('set', "pa.og", $og_context['gid']));
  drupal_add_js(drupal_get_path('module', 'intel_og') . '/intel_og.page.js');
  $time = REQUEST_TIME;
  $params = session_get_cookie_params();
  setcookie('l10i_og', $og_context['gid'], 0, $params['path'], $params['domain'], $params['secure'], $params['httponly']);
}

function intel_og_intel_l10iq_pushes_alter(&$l10iq_pushes) {
  $entity_type = variable_get('intel_og_default_group_type', 'node');
  $og_context = og_context($entity_type);

  if (empty($og_context['gid'])) {
    return;
  }

  $entity = entity_load($og_context['group_type'], array($og_context['gid']));
  $entity = $entity[$og_context['gid']];

  if (isset($entity->field_ga_code)) {
    $wrapper = entity_metadata_wrapper($entity_type, $entity);
    $ga_codes = $wrapper->field_ga_code->value();

    $params = array();

    if (!empty($ga_codes)) {
      // insert the second tracking code after the first so that the main tracking
      // code remains the default
      foreach ($l10iq_pushes AS $i => $push) {
        if ($push[0] == 'ga.create') {
          if (is_array($ga_codes)) {
            $j = 0;
            foreach ($ga_codes AS $ga_code) {
              $params['name'] = 'l10i_og' . $j;
              array_splice($l10iq_pushes, $i+$j+1, 0, array(array('ga.create', $ga_code, 'auto', $params)));
              $j++;
            }
          }
          else {
            $params['name'] = 'l10i_og';
            array_splice($l10iq_pushes, $i+1, 0, array(array('ga.create', $ga_codes, 'auto', $params)));
          }
          return;
        }
      }
    }

    /*
    if (!empty($ga_codes)) {
      // insert the second tracking code after the first so that the main tracking
      // code remains the default
      foreach ($l10iq_pushes AS $i => $push) {
        if ($push[0] == '_setAccount') {
          if (is_array($ga_codes)) {
            $j = 0;
            foreach ($ga_codes AS $ga_code) {
              array_splice($l10iq_pushes, $i+$j+1, 0, array(array('_setAccount', $ga_code, 'l10i_og' . $j)));
              $j++;
            }
          }
          else {
            array_splice($l10iq_pushes, $i+1, 0, array(array('_setAccount', $ga_codes, 'l10i_og')));
          }
          return;
        }
      }
    }
    */
  }
}

/*
function intel_og_intel_page_settings_js_alter(&$js, &$page) {

}
*/

function intel_og_artifact_save($artifact_type, $aid, $group_type, $gid) {
  $key = array(
    'artifact_type' => $artifact_type,
    'aid' => $aid,
    'group_type' => $group_type,
    'gid' => $gid,
  );
  $query = db_merge('intel_og_artifact')
    ->key($key);
  $query->execute();
}

/**
 * Deletes og artifacts
 * @param null $artifact_type
 * @param null $aid
 * @param null $group_type
 * @param null $gid
 */
function intel_og_artifact_delete($artifact_type = null, $aid = null, $group_type = null, $gid = null) {
  $query = db_delete('intel_og_artifact');

  if (isset($artifact_type)) {
    $query->condition('artifact_type', $artifact_type);
  }
  if (isset($aid)) {
    $query->condition('aid', $aid);
  }
  if (isset($group_type)) {
    $query->condition('group_type', $group_type);
  }
  if (isset($gid)) {
    $query->condition('gid', $gid);
  }

  $query->execute();
}

/**
 * Implements hook_form_alter().
 */
function intel_og_form_alter(&$form, &$form_state, $form_id) {
  // Webform is being presented to visitor.
  if (isset($form['#node']->webform) && in_array('webform_client_form_submit', $form['#submit'])) {

    /* TODO: not sure if this is needed
    $values = array(
      'id' => 'user',
    );
    $entity = entity_get_controller('intel_visitor')->create($values);
    */

    $og_context = og_context();
    if (empty($og_context['gid'])) {
      return;
    }

    $form_state['og_context'] = $og_context;

    // check if og_group_ref field exists and has no default_value
    if (isset($form['submitted']['og_group_ref'])) {
      if (isset($form['submitted']['og_group_ref']['#default_value']) && empty($form['submitted']['og_group_ref']['#default_value'])) {
        $form['submitted']['og_group_ref']['#default_value'] = $og_context['gid'];
      }
      if (isset($form['submitted']['og_group_ref']['#value']) && empty($form['submitted']['og_group_ref']['#value'])) {
        $form['submitted']['og_group_ref']['#value'] = $og_context['gid'];
      }
    }
  }
}

function intel_og_intel_page_attribute_info() {
  $attributes = array();
  $attributes['og'] = array(
    'title' => t('Organic group'),
    'title_plural' => t('Organic groups'),
    'description' => t('The organic group context of a page.'),
    'type' => 'item',
    'options_description' => t('Auto generated from og_context.'),
    'options info callback' => 'intel_og_page_attribute_og_option_info',
  );
  return $attributes;
}

function intel_og_page_attribute_og_option_info($option_id, $data_options) {
  $data = array(
    'title' => '',
  );
  $group_type = variable_get('intel_og_default_group_type', 'node');
  $entity = entity_load($group_type, array($option_id));
  $entity = $entity[$option_id];
  if (!empty($entity)) {
    $data['title'] = $entity->label();
    $data['uri'] = $entity->uri();
  }

  if (!empty($data_options['page_count'])) {
    $query_str = "
      SELECT count(id)
      FROM {og_membership}
      WHERE
        entity_type = 'node'
        AND group_type = :group_type
        AND gid = :gid
    ";

    $query = db_query($query_str, array(
      ':gid' => $option_id,
      ':group_type' => $group_type,
    ));

    $data['page_count'] = $query->fetchField();
  }
  return $data;
}

function intel_og_intel_form_submission_data(&$visitor, &$submission, &$track, $context) {
//$args = func_get_args();
//dsm($args);
  $gid = null;
  if (isset($context['submit_context']['og'])) {
    $gid = $context['submit_context']['og'];
  }
  else {
    if ($submission->type == 'webform') {
      $wf_node = node_load($submission->fid);
      if (isset($wf_node->webform['components'])) {

      }
      foreach ($wf_node->webform['components'] AS $id => $comp) {
        if ($comp['form_key'] == 'og_group_ref') {
          $wf_submission = webform_get_submission($submission->fid, $submission->fsid);
          if (isset($wf_submission->data[$id])) {
            // webform 3 data format
            if (!empty($wf_submission->data[$id]['value'][0])) {
              $gid = $wf_submission->data[$id]['value'][0];
            }
            // webform 4 data format
            else if (!empty($wf_submission->data[$id][0])) {
              $gid = $wf_submission->data[$id][0];
            }
          }
        }
      }
    }
  }

  if ($gid) {
    // if og is set on submit context, add it to the submission object. Data will
    // be saved after submission and sid is created
    $submission->og_gid = $gid;
    $visitor->og_gid = $gid;
    $track['oa']['og'] = $gid;
    //intel_add_page_intel_push(array('set', "pa.og", $gid));
  }
}

function intel_og_intel_visitor_insert($visitor) {
  //dsm('hook_intel_visitor_insert');
  //dsm($visitor);
  intel_og_intel_visitor_save($visitor);
}

function intel_og_intel_visitor_update($visitor) {
  //dsm('hook_intel_visitor_update');
  //dsm($visitor);
  intel_og_intel_visitor_save($visitor);
}

function intel_og_intel_visitor_save($visitor) {
  if (!empty($visitor->og_gid)) {
    // called used to stop endless loop on visitor save
    static $done;
    if (!isset($done)) {
      $done = array(
        'artifact' => 0,
        'field' => 0,
      );
    }
    if (empty($done['artifact'])) {
      $done['artifact'] = 1;
      $group_type = variable_get('intel_og_default_group_type', 'node');
      intel_og_artifact_save('visitor', $visitor->vid, $group_type, $visitor->og_gid);
    }

    $field_name = 'og_group_ref';
    if (!isset($visitor->og_group_ref)) {
      return;
    }

    $lang = LANGUAGE_NONE;

    $og_values = array(
      'entity_type' => 'intel_visitor',
      'entity' => $visitor,
      'field_name' => $field_name,
      'state' => OG_STATE_ACTIVE,
    );

    // load the og membership for visitor using submitted og_gid
    // 4th param as false means it will not automatically be saved
    $og_mem = og_group('dwyr_franchise', $visitor->og_gid, $og_values, FALSE);
//dsm($og_mem);
    // if it already exists, exit. We are done.
    if (empty($og_mem->is_new)) {
      return;
    }

    // we need to check the max number of values the og_group_ref field can hold
    // and the number of existing values. If we try to set more values than the
    // field can hold we will get a nasty error

    // for some dumb reason you have to reload the visitor for the og_group
    // function to work and actually save a membership
    $visitorl = intel_visitor_load($visitor->vid);
    $field_info = field_info_field($field_name);

//dsm($visitorl);

    // if the group_ref field is not set to unlimted and we are at the max number
    // of values, delete one of the values
    if (($field_info['cardinality'] != -1) && !empty($visitorl->og_group_ref[$lang]) && ($field_info['cardinality'] <= count($visitorl->og_group_ref[$lang]))) {
      $og_mem_replace = og_group('dwyr_franchise', $visitorl->og_group_ref[$lang][0]['target_id'], $og_values);
//dsm($og_mem_replace);
      og_membership_delete($og_mem_replace->id);
      // reload again
      $visitorl = intel_visitor_load($visitor->vid);
      $og_values['entity'] = $visitorl;
    }

    // save the new og_membership
    $og_mem = og_group('dwyr_franchise', $visitor->og_gid, $og_values);
    return;
  }
}

function intel_og_intel_submission_insert($submission) {
//dsm($submission);
  if (!empty($submission->og_gid)) {
    $group_type = variable_get('intel_og_default_group_type', 'node');
    intel_og_artifact_save('submission', $submission->sid, $group_type, $submission->og_gid);
  }

}

/**
 * Implements hook_intel_visitor_select_query_alter()
 * @param $query
 * @param $context
 */
function intel_og_intel_visitor_select_query_alter($query, $context, $vars = array()) {
  $valid_contexts = array(
    'report_dashboard_new_contacts' => 1,
    'report_dashboard_new_contacts_count_last_month' => 1,
  );
  if (!empty($valid_contexts[$context])) {
    if (isset($vars['report']['filters']['page-attr'][0]) && (substr($vars['report']['filters']['page-attr'][0], 0, 3) == 'og:')) {
      $gid = (int)substr($vars['report']['filters']['page-attr'][0], 3);
      intel_og_add_group_visitor_query_join($query, $gid, $vars);
    }
  }
}

/**
 * Implements hook_intel_visitor_select_query_alter()
 * @param $query
 * @param $context
 */
function intel_og_intel_node_select_query_alter($query, $context, $vars = array()) {
  $valid_contexts = array(
    'report_dashboard_new_nodes' => 1,
    'report_dashboard_new_nodes_count_last_month' => 1,
  );
  if (!empty($valid_contexts[$context])) {
    if (isset($vars['report']['filters']['page-attr'][0]) && (substr($vars['report']['filters']['page-attr'][0], 0, 3) == 'og:')) {
      $gid = (int)substr($vars['report']['filters']['page-attr'][0], 3);
      intel_og_add_group_node_query_join($query, $gid, $vars);
    }
    //dsm(" " . $query);
  }
}

function intel_og_query_alter($query) {
  // alter intel visitor queries
  if (
    !$query->hasTag('intel_admin_people_contacts')
    && !$query->hasTag('intel_admin_people_visitors')
    && !$query->hasTag('intel_submission_load_filtered')
  ) {
    return;
  }

  $menu_item = menu_get_item();
  $callbacks = array(
    'intel_og_admin_people_contacts',
    'intel_og_admin_people_visitors',
    'intel_og_admin_people_submissions'
  );

  // if menu page callback is not one we want to filter or page arguments don't match
  // exit
  if (
    !in_array($menu_item['page_callback'], $callbacks)
    || empty($menu_item['page_arguments'])
    || !is_array($menu_item['page_arguments'])
    || (count($menu_item['page_arguments']) < 2)
  ) {
    return;
  }

  $group_type = $menu_item['page_arguments'][0];
  $gid = $menu_item['page_arguments'][1];

  // check if in group admin context
  if (
    $query->hasTag('intel_admin_people_contacts')
    || $query->hasTag('intel_admin_people_visitors')
    || $query->hasTag('intel_report_dashboard_new_contacts')
  ) {
    intel_og_add_group_visitor_query_join($query, $gid);
    /*
    // check if og_group_ref field exists on intel_visitor entity
    $field_info = field_info_instances('intel_visitor', 'intel_visitor');
    if (isset($field_info['og_group_ref'])) {
      // need to filter by og ownership by using inner join
      $join_on = '%alias.etid = intel_visitor.vid
        AND %alias.entity_type = :og_entity_type
        AND %alias.gid = :gid';
      $join_vars = array(
        ':og_entity_type' => 'intel_visitor',
        ':gid' => $gid,
      );
      $i = $query->innerJoin('og_membership', 'm', $join_on, $join_vars);
    }
    // else use artifacts table
    else {
      $join_on =  "%alias.artifact_type = 'visitor'
        AND %alias.aid = s.sid
        AND %alias.gid = :gid";
      $join_vars = array(
        ':gid' => $gid,
      );
      $i = $query->innerJoin('intel_og_artifact', 'a', $join_on, $join_vars);
    }
    */

//print_r($query);
//dsm(" " . $query);
  }
  else if (
    $query->hasTag('intel_submission_load_filtered')
    && ($menu_item['page_callback'] == 'intel_og_admin_people_submissions')
  ) {
    $join_on =  "%alias.artifact_type = 'submission'
        AND %alias.aid = s.sid
        AND %alias.gid = :gid";
    $join_vars = array(
      ':gid' => $gid,
    );
    $i = $query->innerJoin('intel_og_artifact', 'a', $join_on, $join_vars);

    //$query->condition("$i.gid", $gid);
//dsm($query);
//dsm(" " . $query);
  }
  //dsm($query);
}

function intel_og_add_group_visitor_query_join($query, $gid, $vars = array()) {
  static $field_info;
  if (!isset($field_info)) {
    $field_info = field_info_instances('intel_visitor', 'intel_visitor');
  }
  if (isset($field_info['og_group_ref'])) {
    $alias = isset($vars['table_alias']['intel_visitor']) ? $vars['table_alias']['intel_visitor'] : 'intel_visitor';
    // need to filter by og ownership by using inner join
    $join_on = '%alias.etid = ' . $alias . '.vid
      AND %alias.entity_type = :og_entity_type
      AND %alias.gid = :gid';
    $join_vars = array(
      ':og_entity_type' => 'intel_visitor',
      ':gid' => $gid,
    );
    $i = $query->innerJoin('og_membership', 'm', $join_on, $join_vars);
  }
  // else use artifacts table
  else {
    $join_on =  "%alias.artifact_type = 'visitor'
      AND %alias.aid = v.vid
      AND %alias.gid = :gid";
    $join_vars = array(
      ':gid' => $gid,
    );
    $i = $query->innerJoin('intel_og_artifact', 'a', $join_on, $join_vars);
  }
}

function intel_og_add_group_node_query_join($query, $gid, $vars = array()) {
  static $field_info;

  $alias = isset($vars['table_alias']['node']) ? $vars['table_alias']['node'] : 'node';
  // need to filter by og ownership by using inner join
  $join_on = '%alias.etid = ' . $alias . '.nid
    AND %alias.entity_type = :og_entity_type
    AND %alias.gid = :gid';
  $join_vars = array(
    ':og_entity_type' => 'node',
    ':gid' => $gid,
  );
  $i = $query->innerJoin('og_membership', 'm', $join_on, $join_vars);
}

/**
 * Implements hook_entity_delete()
 *
 * delete artifact data if group entity is deleted
 * @param $entity
 * @param $type
 */
function intel_og_entity_delete($entity, $type) {
  // go ahead and just delete all entities from table. If entity is not a group, it won't
  // exist in the table
  list($gid) = entity_extract_ids($type, $entity);
  intel_og_artifact_delete(null, null, $type, $gid);
}

