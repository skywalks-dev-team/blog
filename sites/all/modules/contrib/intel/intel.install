<?php
/**
 * @file
 * Installation file for LevelTen Intelligence
 * 
 * @author Tom McCracken <tomm@getlevelten.com>
 */

/**
 *  Implementation of hook_install().
 */
function intel_install() {
  
}

/**
 * Implementation of hook_uninstall().
 */
function intel_uninstall() {
  $query = db_delete('variable')
    ->condition('name', 'intel_%', 'LIKE');

  $query->execute();
}

/**
 *  Implementation of hook_schema
 */
function intel_schema() {
  $schema['intel_visitor'] = array(
    'description' => 'Stores select tracking events for site visitors',
    'fields' => array(
      'vid' => array(
        'description' => 'internal id',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'created' => array(
        'description' => 'timestamp when visitor was created',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'updated' => array(
        'description' => 'last update date',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'last_activity' => array(
        'description' => 'timestamp of last activity',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'name' => array(
        'description' => 'Person\'s name',
        'type' => 'varchar',
        'length' => '128',
        'not null' => TRUE,
      ),
      'contact_created' => array(
        'description' => 'when the contact was created',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'data_updated' => array(
        'description' => 'last data update timestamp',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'data' => array(
        'description' => 'saved data',
        'type' => 'blob',
        'size' => 'big',
        'not null' => TRUE,
        'serialize' => TRUE,
      ),
      'ext_updated' => array(
        'description' => 'last ext update timestamp',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'ext_data' => array(
        'description' => 'saved analytics data',
        'type' => 'blob',
        'size' => 'big',
        'not null' => TRUE,
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('vid'),
  );
  
  /*
  $schema['intel_visitor_join'] = array(
    'description' => 'Stores select tracking events for site visitors',
    'fields' => array(
      'vid' => array(
        'description' => 'visitor id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'entity_type' => array(
        'description' => 'type of entity',
        'type' => 'varchar',
        'length' => '128',
        'not null' => TRUE,
      ),
      'entity_id' => array(
        'description' => 'id for associated entity',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'data' => array(
        'description' => 'saved data',
        'type' => 'blob',
        'size' => 'big',
        'not null' => TRUE,
        'serialize' => TRUE,
      ),
    ),
    'indexes' => array(
      'vid' => array('vid'),
      'entity_id' => array('entity_id'),
    ),
  );
  */
  
  $schema['intel_visitor_identifier'] = array(
    'description' => 'Additional identifiers for visitors such as first name, last name, emails',
    'fields' => array(
      'vid' => array(
        'description' => 'person entity id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'tag key',
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
      ),
      'delta' => array(
        'description' => 'sort order for identifiers',
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
      ),
      'value' => array(
        'description' => 'tag value',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'vid' => array('vid'),
      'type' => array(array('type', 10)),
      'value' => array(array('value', 10)),
    ),
  );
  
  $schema['intel_submission'] = array(
    'description' => 'Stores form submission data for multiple form types',
    'fields' => array(
      'sid' => array(
        'description' => 'internal id',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'vid' => array(
        'description' => 'Foreign key for intel_visitor table',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'submitted' => array(
        'description' => 'unix timestamp for when the submission was made',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'type of form. E.g. webform, hubspot',
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
      ),
      'fid' => array(
        'description' => 'the identifier of the form. IDs are type specific.',
        'type' => 'varchar',
        'length' => '64',
        'not null' => TRUE,
      ),
      'fsid' => array(
        'description' => 'submission id. IDs are type specific',
        'type' => 'varchar',
        'length' => '128',
        'not null' => TRUE,
      ),
      'details_url' => array(
        'description' => 'the url/sytem path to access the form submission data',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'response_page_host' => array(
        'description' => 'the domain of the thankyou page',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'response_page_path' => array(
        'description' => 'the path of the thankyou page',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'response_page_id' => array(
        'description' => 'the nid if the thankyou page is a node',
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
      ),
      'form_page_host' => array(
        'description' => 'the domain of the page the form was submitted from',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'form_page_path' => array(
        'description' => 'the path of the page the form was submitted from',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'form_page_id' => array(
        'description' => 'the nid of the of the page the form was submitted from if a node',
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
      ),
      'cta_page_host' => array(
        'description' => 'the domain of the page displaying the cta',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'cta_page_path' => array(
        'description' => 'the path of the page displaying the cta',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'cta_page_id' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'cta_id' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'data' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'blob',
        'size' => 'big',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('sid'),
    'indexes' => array(
      'vid' => array('vid'),
      'fid' => array('fid'),
      'fsid' => array('fsid'),
      'form_page_id' => array('form_page_id'),
      'form_page_path' => array('form_page_path'),
      'response_page_id' => array('response_page_id'),
      'response_page_path' => array('response_page_path'),
      'cta_id' => array('cta_id'),
      'cta_page_id' => array('cta_page_id'),
      'cta_page_path' => array('cta_page_path'),
    ),
  );

  $schema['intel_phonecall'] = array(
    'description' => 'Stores inbound phone call data',
    'fields' => array(
      'cid' => array(
        'description' => 'internal id',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'vid' => array(
        'description' => 'Foreign key for intel_visitor table',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'initiated' => array(
        'description' => 'unix timestamp for when the call was made',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'completed' => array(
        'description' => 'unix timestamp for when the call was finished',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'type of number',
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
      ),
      'to_num' => array(
        'description' => 'phone number called',
        'type' => 'varchar',
        'length' => '64',
        'not null' => TRUE,
      ),
      'from_num' => array(
        'description' => 'calling from phone number',
        'type' => 'varchar',
        'length' => '64',
        'not null' => TRUE,
      ),
      'details_url' => array(
        'description' => 'the url/sytem path to access the form submission data',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'form_page_host' => array(
        'description' => 'the domain of the page the form was submitted from',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'form_page_path' => array(
        'description' => 'the path of the page the form was submitted from',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'form_page_id' => array(
        'description' => 'the nid of the of the page the form was submitted from if a node',
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
      ),
      'cta_page_host' => array(
        'description' => 'the domain of the page displaying the cta',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'cta_page_path' => array(
        'description' => 'the path of the page displaying the cta',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'cta_page_id' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'cta_id' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'data' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'blob',
        'size' => 'big',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('cid'),
    'indexes' => array(
      'vid' => array('vid'),
      'to_num' => array('to_num'),
      'from_num' => array('from_num'),
      'form_page_id' => array('form_page_id'),
      'form_page_path' => array('form_page_path'),
      'cta_id' => array('cta_id'),
      'cta_page_id' => array('cta_page_id'),
      'cta_page_path' => array('cta_page_path'),
    ),
  );

  $schema['intel_emailclick'] = array(
    'description' => 'Stores email click through data',
    'fields' => array(
      'cid' => array(
        'description' => 'internal id',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'vid' => array(
        'description' => 'Foreign key for intel_visitor table',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'clicked' => array(
        'description' => 'unix timestamp for the first time link was clicked',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'last' => array(
        'description' => 'unix timestamp for the last link was clicked',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'type of form. E.g. mailchimp',
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
      ),
      'eid' => array(
        'description' => 'the identifier of the email sent out. IDs are type specific.',
        'type' => 'varchar',
        'length' => '64',
        'not null' => TRUE,
      ),
      'lid' => array(
        'description' => 'the identifier for the link that was clicked. IDs are type specific',
        'type' => 'varchar',
        'length' => '128',
        'not null' => TRUE,
      ),
      'email' => array(
        'description' => 'recipient\'s email address',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'response_page_host' => array(
        'description' => 'the domain of the landing page page',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'response_page_path' => array(
        'description' => 'the path of the landing page page',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'response_page_id' => array(
        'description' => 'the nid if the landing page is a node',
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
      ),
      'data' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'blob',
        'size' => 'big',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('cid'),
    'indexes' => array(
      'vid' => array('vid'),
      'fid' => array('eid'),
      'fsid' => array('lid'),
      'response_page_id' => array('response_page_id'),
      'response_page_path' => array('response_page_path'),
    ),
  );

  $schema['intel_entity_attr'] = array(
    'description' => ('General storage for entity attributes not stored elsewhere.'),
    'fields' => array(
      'entity_type' => array(
        'type' => 'varchar',
        'length' => '64',
        'not null' => FALSE,
        'default' => '',
        'description' => 'Entity type',
      ), //entity_type
      'entity_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => 'The id for the analysis.',
      ), //entity_id
      'path' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
        'default' => '',
        'description' => 'The system of ',
      ), //path
      'alias' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
        'default' => '',
        'description' => 'Path alias of resource',
      ), //alias
      'attr_key' => array(
        'type' => 'varchar',
        'length' => '64',
        'not null' => TRUE,
        'default' => '',
        'description' => 'The page attribute key',
      ), //attr_key
      'vsid' => array(
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => FALSE,
          'description' => 'Value string id.',
      ), //vsid
      'value_num' => array(
        'type' => 'float',
        'not null' => FALSE,
        'description' => 'Value stored as a number',
      ), //value_num
    ),
    'indexes' => array(
      'entity' => array('entity_type', 'entity_id'),
      'path' => array(array('path', 18)),
      'alias' => array(array('alias', 18)),
      'attr_key' => array(array('attr_key', 4)),
      'vsid' => array('vsid'),
    ),
  );

  $schema['intel_value_str'] = array(
    'description' => 'Stores indexed value strings.',
    'fields' => array(
      'vsid' => array(
        'description' => 'internal id',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'value_str' => array(
        'description' => 'the value string term',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('vsid'),
    'indexes' => array(
      'value_str' => array(array('value_str', 16)),
    ),
  );

  return $schema;
}

/**
 * Implements hook_requirements().
 */
function intel_requirements($phase) {
  if ($phase == 'update') {
    return array();
  }
  $requirements = array();
  // Ensure translations don't break at install time:
  $t = get_t();

  if (in_array($phase, array('runtime', 'update'))) {
    $requirements['intel'] = array(
      'title' => $t('Intelligence'),
    );
    $message = '';
    if (!$lib_path = intel_verify_library($message)) {
      $requirements['intel'] += array(
        'description' => $message,
        'severity' => REQUIREMENT_ERROR,
        'value' => $t('Not configured'),
      );
      return $requirements;
    }
    $tid = variable_get('intel_ga_account', '');
    //if (!$account_level = intel_verify_apikey($message, $tid, $apikey)) {
    if (!$account_level = intel_verify_apikey($message)) {
      $message .= ' ' . $t('The Intelligence module has not been configured yet. Please configure settings from the <a href="@url">Intelligence settings page</a>.', array('@url' => url('admin/config/intel/settings')));
      $requirements['intel'] += array(
        'description' => $message,
        'severity' => REQUIREMENT_WARNING,
        'value' => $t('Not configured'),
      );
      return $requirements;
    }
    $requirements['intel'] += array(
      'value' => $t('Valid (tid: @tid)',
        array(
          '@tid' => $tid,
        )
      ),
      'description' => $t('Libraries are installed properly and API keys are valid.'),
      'severity' => REQUIREMENT_OK,
    );
  }

  return $requirements;
}

/**
 * Adds visitor identifier support
 */
function intel_update_7001() {
  $schema = intel_schema();
  // create visitor identifier table
  db_create_table('intel_visitor_identifier', $schema['intel_visitor_identifier']);

  // migrate data from intel_visitor to intel_visitor_identifier
  $query = db_select('intel_visitor', 'v')
    ->fields('v');
  $result = $query->execute();
  $fields = array(
    'delta' => 0,
  );
  while ($r = $result->fetchObject()) {
    $fields['vid'] = $r->vid;
    $fields['type'] = 'vid';
    $fields['value'] = $r->vid;
    $query = db_insert('intel_visitor_identifier')
      ->fields($fields)
      ->execute();

    $fields['type'] = 'vtk';
    $fields['value'] = $r->vtkid . $r->vtkc;
    $query = db_insert('intel_visitor_identifier')
      ->fields($fields)
      ->execute();

    if ($r->email) {
      $fields['type'] = 'email';
      $fields['value'] = $r->email;
      $query = db_insert('intel_visitor_identifier')
        ->fields($fields)
        ->execute();
    }

    if ($r->uid) {
      $fields['type'] = 'uid';
      $fields['value'] = $r->uid;
      $query = db_insert('intel_visitor_identifier')
        ->fields($fields)
        ->execute();
    }
  }

  // remove fields from intel_visitor
  db_drop_field('intel_visitor', 'vtkid');
  db_drop_field('intel_visitor', 'vtkc');
  db_drop_field('intel_visitor', 'email');
  db_drop_field('intel_visitor', 'uid');

  // change format of entity settings
  $entity_settings = variable_get('intel_page_attributes_entity_settings', array());
  foreach ($entity_settings AS $entity => $s) {
    foreach($s AS $bundle => $settings) {
      variable_set('intel_entity_settings_' . $entity . '__' . $bundle, $settings);
    }
  }
  variable_del('intel_page_attributes_entity_settings');

}

/**
 * Adds phone call tracking support
 */
function intel_update_7002() {
  if (!db_table_exists('intel_phonecall')) {
    $schema = intel_schema();
    // create visitor identifier table
    db_create_table('intel_phonecall', $schema['intel_phonecall']);
  }
}

/**
 * Adds email click tracking support
 */
function intel_update_7003() {
  if (!db_table_exists('intel_emailclick')) {
    $schema = intel_schema();
    // create visitor identifier table
    db_create_table('intel_emailclick', $schema['intel_emailclick']);
  }
}

/**
 * Adds entity_attr and value_str table to support storage of add-on attributes
 */
function intel_update_7004() {
  if (!db_table_exists('intel_entity_attr')) {
    $schema = intel_schema();
    db_create_table('intel_entity_attr', $schema['intel_entity_attr']);
  }
  if (!db_table_exists('intel_value_str')) {
    $schema = intel_schema();
    db_create_table('intel_value_str', $schema['intel_value_str']);
  }
}

/**
 * Enable google_analytics_reports_api module
 */
function intel_update_7005() {
  $modules = array(
    'google_analytics_reports_api',
    'google_analytics_reports_views',
  );
  module_enable($modules);
}
